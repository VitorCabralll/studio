rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // REGRAS DE SEGURANÇA PROFISSIONAIS - LEXAI
    // Sistema jurídico com dados sensíveis requer segurança máxima
    // ============================================================================
    
    // Função auxiliar: verificar se usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função auxiliar: verificar se é o próprio usuário
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Função auxiliar: verificar se usuário é membro do workspace
    function isMember(workspaceId) {
      return isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/workspaces/$(workspaceId)).data.members;
    }
    
    // ============================================================================
    // PERFIS DE USUÁRIOS
    // ============================================================================
    match /usuarios/{userId} {
      // Leitura: apenas o próprio usuário
      allow read: if isOwner(userId);
      
      // Criação: apenas o próprio usuário, com validação
      allow create: if isOwner(userId) && 
        validateUserProfile(request.resource.data);
      
      // Atualização: apenas o próprio usuário, com validação
      allow update: if isOwner(userId) && 
        validateUserProfileUpdate(request.resource.data, resource.data);
      
      // Exclusão: não permitida (dados jurídicos devem ser preservados)
      allow delete: if false;
    }
    
    // ============================================================================
    // WORKSPACES E PROJETOS
    // ============================================================================
    match /workspaces/{workspaceId} {
      // Leitura: apenas membros do workspace
      allow read: if isMember(workspaceId);
      
      // Criação: usuários autenticados podem criar
      allow create: if isAuthenticated() && 
        validateWorkspace(request.resource.data) &&
        request.auth.uid in request.resource.data.members;
      
      // Atualização: apenas membros podem atualizar
      allow update: if isMember(workspaceId) && 
        validateWorkspaceUpdate(request.resource.data, resource.data);
      
      // Exclusão: apenas owner do workspace
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.owner;
    }
    
    // ============================================================================
    // DOCUMENTOS E CONTRATOS (subcoleções do workspace)
    // ============================================================================
    match /workspaces/{workspaceId}/documentos/{documentId} {
      // Apenas membros do workspace podem acessar documentos
      allow read, write: if isMember(workspaceId);
    }
    
    match /workspaces/{workspaceId}/contratos/{contratoId} {
      // Apenas membros do workspace podem acessar contratos
      allow read, write: if isMember(workspaceId);
    }
    
    // ============================================================================
    // SESSÕES E LOGS (para auditoria)
    // ============================================================================
    match /sessions/{sessionId} {
      // Apenas o próprio usuário pode ler suas sessões
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Sistema pode criar sessões
      allow create: if isAuthenticated();
      
      // Não permitir atualização ou exclusão (auditoria)
      allow update, delete: if false;
    }
    
    // ============================================================================
    // LOGS DE AUDITORIA
    // ============================================================================
    match /audit_logs/{logId} {
      // Apenas leitura para o próprio usuário
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Sistema pode criar logs
      allow create: if isAuthenticated();
      
      // Logs são imutáveis (compliance)
      allow update, delete: if false;
    }
    
    // ============================================================================
    // VALIDAÇÕES DE DADOS
    // ============================================================================
    
    // Validar perfil de usuário
    function validateUserProfile(data) {
      return data.keys().hasAll(['email', 'data_criacao']) &&
        data.email is string &&
        data.email == request.auth.token.email &&
        (data.name == null || data.name is string) &&
        (data.phone == null || data.phone is string) &&
        (data.company == null || data.company is string) &&
        (data.oab == null || data.oab is string) &&
        data.areas_atuacao is list &&
        data.primeiro_acesso is bool &&
        data.initial_setup_complete is bool;
    }
    
    // Validar atualização de perfil
    function validateUserProfileUpdate(newData, oldData) {
      return newData.email == oldData.email && // Email não pode mudar
        newData.data_criacao == oldData.data_criacao && // Data criação não pode mudar
        validateUserProfile(newData);
    }
    
    // Validar workspace
    function validateWorkspace(data) {
      return data.keys().hasAll(['name', 'owner', 'members', 'created_at']) &&
        data.name is string &&
        data.name.size() > 0 &&
        data.owner is string &&
        data.members is list &&
        data.members.size() > 0 &&
        request.auth.uid in data.members;
    }
    
    // Validar atualização de workspace
    function validateWorkspaceUpdate(newData, oldData) {
      return newData.owner == oldData.owner && // Owner não pode mudar
        newData.created_at == oldData.created_at && // Data criação não pode mudar
        validateWorkspace(newData);
    }
    
    // ============================================================================
    // REGRA PADRÃO - NEGAR TUDO QUE NÃO FOI EXPLICITAMENTE PERMITIDO
    // ============================================================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}