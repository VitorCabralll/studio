rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // REGRAS DE SEGURANÇA FIRESTORE - LEXAI SISTEMA ROBUSTO
    // ============================================================================
    
    // Função auxiliar para verificar se usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função auxiliar para verificar se é o próprio usuário
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Função auxiliar para verificar se é membro do workspace
    function isWorkspaceMember(workspaceData) {
      return request.auth.uid in workspaceData.members;
    }
    
    // Função auxiliar para verificar se é owner do workspace
    function isWorkspaceOwner(workspaceData) {
      return request.auth.uid in workspaceData.owners;
    }
    
    // ============================================================================
    // 1. USUÁRIOS - Cada usuário acessa apenas seu próprio perfil
    // ============================================================================
    match /usuarios/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // ============================================================================
    // 2. WORKSPACES - Apenas membros podem acessar
    // ============================================================================
    match /workspaces/{workspaceId} {
      allow read: if isAuthenticated() && (
        isWorkspaceMember(resource.data) || 
        isWorkspaceOwner(resource.data)
      );
      allow write: if isAuthenticated() && isWorkspaceOwner(resource.data);
      allow create: if isAuthenticated() && (
        request.auth.uid in request.resource.data.members || 
        request.auth.uid in request.resource.data.owners
      );
      allow delete: if isAuthenticated() && isWorkspaceOwner(resource.data);
    }
    
    // ============================================================================
    // 3. AGENTES - Subcoleção de workspaces
    // ============================================================================
    match /workspaces/{workspaceId}/agentes/{agentId} {
      allow read: if isAuthenticated() && (
        isWorkspaceMember(get(/databases/$(database)/documents/workspaces/$(workspaceId)).data) ||
        isWorkspaceOwner(get(/databases/$(database)/documents/workspaces/$(workspaceId)).data)
      );
      allow write, create: if isAuthenticated() && (
        isWorkspaceMember(get(/databases/$(database)/documents/workspaces/$(workspaceId)).data) ||
        isWorkspaceOwner(get(/databases/$(database)/documents/workspaces/$(workspaceId)).data)
      );
      allow delete: if isAuthenticated() && isWorkspaceOwner(get(/databases/$(database)/documents/workspaces/$(workspaceId)).data);
    }
    
    // ============================================================================
    // 4. DOCUMENTOS - Apenas do próprio usuário
    // ============================================================================
    match /documents/{documentId} {
      allow read, write, create: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // ============================================================================
    // 5. PROCESSAMENTO DE DOCUMENTOS - Apenas do próprio usuário
    // ============================================================================
    match /document_processing/{documentId} {
      allow read, write, create: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // ============================================================================
    // 6. RETENÇÃO DE DADOS - Apenas do próprio usuário
    // ============================================================================
    match /data_retention/{documentId} {
      allow read, write, create, delete: if isAuthenticated() && isOwner(resource.data.documentId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.documentId);
    }
    
    // ============================================================================
    // 7. CONFIGURAÇÕES - Leitura livre para usuários autenticados
    // ============================================================================
    match /configuracoes/{configId} {
      allow read: if isAuthenticated();
      allow write: if false; // Apenas administradores via server-side
    }
    
    // ============================================================================
    // 8. UPLOADS - Apenas do próprio usuário
    // ============================================================================
    match /uploads/{uploadId} {
      allow read, write, create, delete: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // ============================================================================
    // FALLBACK - Negar tudo que não foi explicitamente permitido
    // ============================================================================
    // Qualquer coleção não especificada acima será negada por padrão
  }
}