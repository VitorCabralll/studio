import { doc, getDoc, setDoc, arrayUnion, serverTimestamp } from 'firebase/firestore';
import type { ServiceResult, ServiceError } from './user-service';
import { getFirebaseDb, getFirebaseAuth } from '@/lib/firebase';
import { enforceMaximumPrivacy } from './privacy-enforcer';
import { processFileWithOCR, convertToExtractedText, isFileSupported } from './ocr-service';

// üõ°Ô∏è Fun√ß√£o utilit√°ria para validar token JWT antes de consultas Firestore
async function validateAuthToken(): Promise<{ success: boolean; error?: string }> {
  try {
    const auth = getFirebaseAuth();
    const currentUser = auth.currentUser;
    
    if (!currentUser) {
      return { success: false, error: 'Usu√°rio n√£o autenticado' };
    }

    // For√ßar refresh do token para garantir que est√° v√°lido
    await currentUser.getIdToken(true);
    console.log('‚úÖ Token JWT v√°lido obtido para consulta Firestore');
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå Erro ao validar token JWT:', error);
    return { success: false, error: 'Falha na valida√ß√£o do token de autentica√ß√£o' };
  }
}

// Tipos para processamento de documentos
export interface ExtractedText {
  source: string;           // Nome do arquivo original (sem o arquivo em si)
  content: string;          // Texto extra√≠do via OCR
  type: 'ocr' | 'instruction' | 'auxiliary';
  confidence?: number;      // Confian√ßa do OCR (0-1)
  processedAt: Date;
  size: number;            // Tamanho original do arquivo (para estat√≠sticas)
}

export interface DocumentProcessingResult {
  documentId: string;
  extractedTexts: ExtractedText[];
  totalSources: number;
  totalCharacters: number;
  processingStartTime: Date;
}

export interface SecureDocumentResult {
  documentId: string;
  generatedContent: string;
  dataDiscarded: boolean;
  securityLevel: 'maximum_privacy';
  processingTime: number;
}

// Fun√ß√£o utilit√°ria para criar erros padronizados
function createProcessorError(error: unknown, operation: string): ServiceError {
  if (error instanceof Error) {
    return {
      code: error.name || 'processor-error',
      message: `Erro no processamento durante ${operation}: ${error.message}`,
      details: error.stack
    };
  }
  
  return {
    code: 'unknown',
    message: `Erro desconhecido no processamento durante ${operation}`,
    details: String(error)
  };
}

/**
 * Salva texto extra√≠do no Firestore (SEM o arquivo original)
 * @param documentId - ID do documento sendo processado
 * @param extractedTexts - Textos extra√≠dos dos arquivos
 * @param userId - ID do usu√°rio
 * @returns Resultado da opera√ß√£o
 */
export async function saveExtractedTexts(
  documentId: string,
  extractedTexts: ExtractedText[],
  userId: string
): Promise<ServiceResult<DocumentProcessingResult>> {
  try {
    // Valida√ß√µes
    if (!documentId || documentId.trim() === '') {
      return {
        data: null,
        error: {
          code: 'invalid-argument',
          message: 'ID do documento √© obrigat√≥rio.'
        },
        success: false
      };
    }

    if (!userId || userId.trim() === '') {
      return {
        data: null,
        error: {
          code: 'invalid-argument',
          message: 'ID do usu√°rio √© obrigat√≥rio.'
        },
        success: false
      };
    }

    if (!extractedTexts || extractedTexts.length === 0) {
      return {
        data: null,
        error: {
          code: 'invalid-argument',
          message: 'Textos extra√≠dos s√£o obrigat√≥rios.'
        },
        success: false
      };
    }

    // Preparar dados para o Firestore
    const documentData = {
      extractedTexts: extractedTexts.map(text => ({
        ...text,
        processedAt: serverTimestamp()
      })),
      metadata: {
        totalSources: extractedTexts.length,
        totalCharacters: extractedTexts.reduce((sum, text) => sum + text.content.length, 0),
        lastProcessed: serverTimestamp()
      },
      userId,
      status: 'texts_extracted'
    };

    // Salvar no Firestore
    const docRef = doc(getFirebaseDb(), 'document_processing', documentId);
    await setDoc(docRef, documentData, { merge: true });

    const result: DocumentProcessingResult = {
      documentId,
      extractedTexts,
      totalSources: extractedTexts.length,
      totalCharacters: extractedTexts.reduce((sum, text) => sum + text.content.length, 0),
      processingStartTime: new Date()
    };

    return { data: result, error: null, success: true };

  } catch (error) {
    console.error('Erro em saveExtractedTexts:', error);
    return {
      data: null,
      error: createProcessorError(error, 'salvar textos extra√≠dos'),
      success: false
    };
  }
}

/**
 * Adiciona texto de instru√ß√£o personalizada do usu√°rio
 * @param documentId - ID do documento
 * @param instruction - Instru√ß√£o do usu√°rio
 * @param userId - ID do usu√°rio
 * @returns Resultado da opera√ß√£o
 */
export async function addUserInstruction(
  documentId: string,
  instruction: string,
  userId: string
): Promise<ServiceResult<boolean>> {
  try {
    // Valida√ß√µes
    if (!documentId || !instruction.trim() || !userId) {
      return {
        data: false,
        error: {
          code: 'invalid-argument',
          message: 'DocumentId, instru√ß√£o e userId s√£o obrigat√≥rios.'
        },
        success: false
      };
    }

    const instructionText: ExtractedText = {
      source: 'user_instruction',
      content: instruction.trim(),
      type: 'instruction',
      processedAt: new Date(),
      size: instruction.length
    };

    // Adicionar √† lista de textos extra√≠dos
    const docRef = doc(getFirebaseDb(), 'document_processing', documentId);
    await setDoc(docRef, {
      extractedTexts: arrayUnion({
        ...instructionText,
        processedAt: serverTimestamp()
      }),
      userId
    }, { merge: true });

    return { data: true, error: null, success: true };

  } catch (error) {
    console.error('Erro em addUserInstruction:', error);
    return {
      data: false,
      error: createProcessorError(error, 'adicionar instru√ß√£o do usu√°rio'),
      success: false
    };
  }
}

/**
 * Processa arquivos do usu√°rio: extrai texto via OCR e descarta os arquivos
 * Esta fun√ß√£o coordena todo o fluxo de processamento sem salvar arquivos
 * @param files - Arquivos selecionados pelo usu√°rio
 * @param documentId - ID do documento sendo criado
 * @param userId - ID do usu√°rio
 * @param onProgress - Callback para acompanhar progresso
 * @returns Textos extra√≠dos (arquivos s√£o descartados)
 */
export async function processUserDocuments(
  files: File[],
  documentId: string,
  userId: string,
  onProgress?: (progress: number, status: string) => void
): Promise<ServiceResult<ExtractedText[]>> {
  try {
    if (!files || files.length === 0) {
      return { data: [], error: null, success: true };
    }

    const extractedTexts: ExtractedText[] = [];
    const totalFiles = files.length;

    onProgress?.(0, 'Iniciando processamento...');

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const progress = Math.round(((i + 1) / totalFiles) * 100);
      
      onProgress?.(progress, `Processando ${file.name}...`);

      try {
        let extractedText: ExtractedText;
        
        if (file.type.startsWith('text/')) {
          // Arquivos de texto - leitura direta
          console.log(`üìÑ Lendo arquivo de texto: ${file.name}`);
          const textContent = await file.text();
          extractedText = {
            source: file.name,
            content: textContent,
            type: 'ocr',
            confidence: 1.0,
            processedAt: new Date(),
            size: file.size
          };
        } else if (isFileSupported(file)) {
          // Arquivos de imagem/PDF - OCR REAL LOCAL
          console.log(`üîç Processando ${file.name} com OCR local...`);
          
          const ocrResult = await processFileWithOCR(file, {
            language: 'por+eng',
            onProgress: (progress, message) => {
              const overallProgress = Math.round(((i + progress) / totalFiles) * 100);
              onProgress?.(overallProgress, `${message} (${file.name})`);
            }
          });
          
          extractedText = convertToExtractedText(ocrResult, file.name, file.size);
          
          console.log(`‚úÖ OCR conclu√≠do: ${file.name} (${(ocrResult.confidence * 100).toFixed(1)}% confian√ßa)`);
        } else {
          // Tipo n√£o suportado
          throw new Error(`Tipo de arquivo n√£o suportado: ${file.type}`);
        }

        extractedTexts.push(extractedText);

        // IMPORTANTE: O arquivo File n√£o √© salvo em lugar nenhum
        // Apenas o texto extra√≠do √© mantido - M√ÅXIMA PRIVACIDADE

      } catch (fileError) {
        console.error(`‚ùå FALHA no processamento de ${file.name}:`, fileError);
        
        // Registrar falha mas continuar com outros arquivos
        const errorDetails = fileError instanceof Error ? fileError.message : 'Erro t√©cnico n√£o identificado';
        
        const errorText: ExtractedText = {
          source: file.name,
          content: '', // Texto vazio para falhas reais
          type: 'ocr',
          confidence: 0,
          processedAt: new Date(),
          size: file.size
        };

        extractedTexts.push(errorText);
        
        // Log detalhado para debugging
        console.warn(`‚ö†Ô∏è Arquivo ${file.name} falhou: ${errorDetails} (${file.type}, ${(file.size / 1024 / 1024).toFixed(2)}MB)`);
      }
    }

    onProgress?.(100, 'Processamento conclu√≠do!');

    // Salvar textos extra√≠dos no Firestore
    const saveResult = await saveExtractedTexts(documentId, extractedTexts, userId);
    
    if (!saveResult.success) {
      return {
        data: null,
        error: saveResult.error,
        success: false
      };
    }

    return { data: extractedTexts, error: null, success: true };

  } catch (error) {
    console.error('Erro em processUserDocuments:', error);
    return {
      data: null,
      error: createProcessorError(error, 'processar documentos do usu√°rio'),
      success: false
    };
  }
}

/**
 * Recupera textos extra√≠dos de um documento
 * @param documentId - ID do documento
 * @returns Textos extra√≠dos salvos
 */
export async function getExtractedTexts(documentId: string): Promise<ServiceResult<ExtractedText[]>> {
  try {
    // üõ°Ô∏è Validar token JWT antes da consulta
    const authValidation = await validateAuthToken();
    if (!authValidation.success) {
      return {
        data: null,
        error: {
          code: 'unauthenticated',
          message: authValidation.error || 'Falha na autentica√ß√£o'
        },
        success: false
      };
    }

    if (!documentId || documentId.trim() === '') {
      return {
        data: null,
        error: {
          code: 'invalid-argument',
          message: 'ID do documento √© obrigat√≥rio.'
        },
        success: false
      };
    }

    const docRef = doc(getFirebaseDb(), 'document_processing', documentId);
    const docSnap = await getDoc(docRef);

    if (!docSnap.exists()) {
      return { data: [], error: null, success: true };
    }

    const data = docSnap.data();
    const extractedTexts = data.extractedTexts || [];

    return { data: extractedTexts, error: null, success: true };

  } catch (error) {
    console.error('Erro em getExtractedTexts:', error);
    return {
      data: null,
      error: createProcessorError(error, 'recuperar textos extra√≠dos'),
      success: false
    };
  }
}

/**
 * Finaliza documento com aplica√ß√£o AUTOM√ÅTICA de privacidade m√°xima
 * Esta fun√ß√£o SEMPRE descarta dados imediatamente ap√≥s gera√ß√£o
 * @param documentId - ID do documento processado
 * @param generatedContent - Conte√∫do final do documento gerado
 * @param userId - ID do usu√°rio
 * @param processingStartTime - Quando o processamento come√ßou
 * @returns Resultado seguro da finaliza√ß√£o
 */
export async function finalizeDocumentSecurely(
  documentId: string,
  generatedContent: string,
  userId: string,
  processingStartTime: Date
): Promise<ServiceResult<SecureDocumentResult>> {
  try {
    const finalizationStart = new Date();
    
    console.log(`üîí Iniciando finaliza√ß√£o segura para documento ${documentId}`);

    // Salvar apenas o documento final no Firestore
    const finalDocumentData = {
      documentId,
      content: generatedContent,
      userId,
      status: 'completed',
      generatedAt: serverTimestamp(),
      securityLevel: 'maximum_privacy',
      dataRetentionPolicy: 'zero_retention',
      metadata: {
        wordCount: generatedContent.split(/\s+/).length,
        charCount: generatedContent.length,
        processingTime: finalizationStart.getTime() - processingStartTime.getTime()
      }
    };

    const documentRef = doc(getFirebaseDb(), 'documents', documentId);
    await setDoc(documentRef, finalDocumentData);

    // 2. APLICAR ENFORCEMENT AUTOM√ÅTICO DE PRIVACIDADE M√ÅXIMA
    console.log(`üö® Aplicando enforcement de privacidade m√°xima para documento ${documentId}`);
    
    const enforcementResult = await enforceMaximumPrivacy(
      documentId,
      userId,
      processingStartTime
    );

    if (!enforcementResult.success) {
      // FALHA CR√çTICA DE SEGURAN√áA
      console.error(`üö® FALHA CR√çTICA: N√£o foi poss√≠vel garantir privacidade m√°xima para documento ${documentId}`);
      
      return {
        data: null,
        error: {
          code: 'security-critical-failure',
          message: 'üö® FALHA CR√çTICA DE SEGURAN√áA: Dados podem estar retidos no sistema',
          details: enforcementResult.error?.details
        },
        success: false
      };
    }

    // 3. Sucesso - documento gerado e dados descartados com seguran√ßa
    const result: SecureDocumentResult = {
      documentId,
      generatedContent,
      dataDiscarded: true,
      securityLevel: 'maximum_privacy',
      processingTime: finalizationStart.getTime() - processingStartTime.getTime()
    };

    console.log(`‚úÖ FINALIZA√á√ÉO SEGURA CONCLU√çDA: Documento ${documentId} gerado e dados descartados em ${result.processingTime}ms`);
    
    return { data: result, error: null, success: true };

  } catch (error) {
    console.error(`üö® ERRO CR√çTICO na finaliza√ß√£o segura: ${error}`);
    return {
      data: null,
      error: createProcessorError(error, 'finalizar documento com seguran√ßa m√°xima'),
      success: false
    };
  }
}